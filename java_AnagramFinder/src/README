WordFinder class:
This class is the console-based driver program to responsible for processing the command-line argument and the user
input, handling any error processing, and printing out the resultant word list of all legal anagrams for given racks.
The optional argument for the user-specified dictionary is read at first. Then I created a helper private method called
processDict to convert the given dictionary into an AnagramDictionary object, which can throw two exceptions about the
input dict file and the feasibility of the given dict. The last part in the main method is a while loop to repeatedly
prompt the user to input a string used to initialize a Rack object and then print out the complete list of anagrams for
that specific rack in decreasing order of Scrabble scores.

AnagramDictionary class:
This class is implemented for preprocessing the original dictionary into sets of anagrams
and contains methods used for accessing the words that are anagrams to each other.
I used a HashMap as the instance variable to efficiently store and retrieve words. In the constructor, I converted
every word in the input dictionary to a char array. Then I used the static Arrays.sort() method applying the
quicksort algorithm to alphabetically sort the array so as to generate the unique "label" anagram for that specific
letter combination. Each "label" anagram is the key in the instance Hashmap, which can be used to map different legal
words in the original dictionary but with the same letter combination. In other words, all legal words composed of the
same combination of letters will be store in the "value" set of the instance HashMap, where the "value" set is a
collection of HashSet objects. As I don't need to worry about the order of words when I store them into the anagram
dictionary, I chose HashSet instead of TreeSet.
By using HashSet, I can easily store all words under the same "label" anagram and detect any duplicate words.
The constructDict method is called during the initialization of the dictionary to populate the instance HashMap.
The getAnagramsOf method can be called to find all anagrams of a given string, inside which I initialized a local
ArrayList object to store all the words that are anagrams to the given string.
I created the possibleWords method to find all legal anagrams for a given rack. In this method, I looped over all
elements in the specific Rack object and then use the getAnagramsOf method to find all matching anagrams for different
subsets of the rack, where all the found anagrams are stored in a local ArrayList object which is later alphabetically
sorted by the Collections.sort() method that applies the merge sort algorithm. Eventually, to sort the anagram list
based on Scrabble scores, I created an inner class WordComparator that implements the Comparator class
to override the compare method which is used when I called the Collections.sort() method again to merge sort the
anagrams in decreasing order of scores.

Rack class:
I used an ArrayList as the instance variable to store all subsets of a given rack string. In the constructor, I adopted
a TreeMap whose key is of Character type and value is of Integer type to help me automatically sort the unique letters
in alphabetical order and record the multiplicity of each unique letter in the value set. Then I used a string and an
integer array to respectively store the unique letters and their corresponding multiplicities, which two objects will
be inputted into the getSubsets method that recursively calls the allSubsets method written by the professor to acquire
all subsets from the string multiset.
The getRack method can output an ArrayList object containing all the computed subsets.

ScoreTable class:
This This class stores the information about the Scrabble scores associated with all letters
and provides a static method for clients to assess the score of a specific word.
I created a constant integer array to store the Scrabble scores for the 26 English letters.
The only method in this class, getScore, can evaluate the Scrabble score of a given word by summing the scores of
constituent letters of the word one by one. As this method works for both uppercase and lowercase letters,
it converts all letters to their lowercase forms at the beginning.







